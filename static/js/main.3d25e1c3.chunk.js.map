{"version":3,"sources":["utils/filterTodos.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterBy","TodoItem","React","memo","todo","isSelectedTodo","selectTodo","className","classNames","id","completed","title","type","onClick","TodoList","todos","selectedTodo","map","TodoFilter","filterBy","query","getFilterField","getQuery","applyQuery","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","getUserFromServer","a","userId","userFromServer","useEffect","href","email","name","App","setTodos","setSelectedTodo","setFilterBy","setQuery","appliedQuery","setAppliedQuery","getTodosFromServer","todoFromServer","useCallback","field","text","debounce","visibleTodo","useMemo","filter","Error","normalizeQuery","toLowerCase","trim","includes","filterTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d25e1c3.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\nexport enum FilterBy {\n  Active = 'active',\n  Completed = 'completed',\n  All = 'all',\n}\nexport const filterTodo = (\n  todos: Todo[],\n  filterBy: FilterBy,\n  query: string,\n) => {\n  let visibleTodo = [...todos];\n\n  visibleTodo = visibleTodo.filter(todo => {\n    switch (filterBy) {\n      case FilterBy.Active:\n        return !todo.completed;\n      case FilterBy.Completed:\n        return todo.completed;\n      case FilterBy.All:\n        return visibleTodo;\n      default:\n        throw new Error('not valide filter argument');\n    }\n  });\n\n  const normalizeQuery = query.toLowerCase().trim();\n\n  if (query) {\n    visibleTodo = visibleTodo.filter(todo => {\n      return todo\n        .title\n        .toLowerCase()\n        .includes(normalizeQuery);\n    });\n  }\n\n  return visibleTodo;\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  isSelectedTodo: boolean;\n  selectTodo: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(\n  ({\n    todo,\n    isSelectedTodo,\n    selectTodo,\n  }) => {\n    return (\n      <tr\n        data-cy=\"todo\"\n        className={classNames(\n          { 'has-background-info-light': isSelectedTodo },\n        )}\n      >\n        <td className=\"is-vcentered\">{todo.id}</td>\n        <td className=\"is-vcentered\">\n          {todo.completed && (\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          )}\n        </td>\n\n        <td className=\"is-vcentered is-expanded\">\n          <p className={classNames({\n            'has-text-success': todo.completed,\n            'has-text-danger': !todo.completed,\n          })}\n          >\n            {todo.title}\n          </p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n            onClick={() => {\n              selectTodo(todo);\n            }}\n          >\n            <span className=\"icon\">\n              <i className={classNames(\n                'far',\n                { 'fa-eye': !isSelectedTodo },\n                { 'fa-eye-slash': isSelectedTodo },\n\n              )}\n              />\n            </span>\n          </button>\n        </td>\n      </tr>\n    );\n  },\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos,\n    selectTodo,\n    selectedTodo,\n  }) => {\n    return (\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            todos.map(todo => {\n              const isSelectedTodo = todo.id === selectedTodo?.id;\n\n              return (\n                <TodoItem\n                  todo={todo}\n                  isSelectedTodo={isSelectedTodo}\n                  selectTodo={selectTodo}\n                  key={todo.id}\n                />\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  },\n);\n","import React from 'react';\nimport { FilterBy } from '../../utils/filterTodos';\n\ntype Props = {\n  filterBy: FilterBy\n  query: string\n  getFilterField: (value: FilterBy) => void\n  getQuery: (value: string) => void\n  applyQuery: (value: string) => void\n};\nexport const TodoFilter: React.FC<Props> = React.memo(\n  ({\n    filterBy,\n    query,\n    getFilterField,\n    getQuery,\n    applyQuery,\n  }) => (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterBy}\n            onChange={(event) => (\n              getFilterField(event.target.value as FilterBy)\n            )}\n          >\n            <option value={FilterBy.All}>All</option>\n            <option value={FilterBy.Active}>Active</option>\n            <option value={FilterBy.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            getQuery(event.target.value);\n            applyQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                getQuery('');\n                applyQuery('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  ),\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = React.memo(\n  () => (\n    <div className=\"Loader\" data-cy=\"loader\">\n      <div className=\"Loader__content\" />\n    </div>\n  ),\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  selectTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  selectTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getUserFromServer = async () => {\n    const userFromServer = await getUser(todo.userId);\n\n    setUser(userFromServer);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close modal\"\n              onClick={() => selectTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                todo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n              {' by '}\n\n              <a href={`${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { debounce } from 'lodash';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterBy, filterTodo } from './utils/filterTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterBy, setFilterBy] = useState<FilterBy>(FilterBy.All);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  const getTodosFromServer = async () => {\n    try {\n      const todoFromServer = await getTodos();\n\n      setTodos(todoFromServer);\n      setIsLoading(false);\n    } catch {\n      // console.log('data no load from server');\n    }\n  };\n\n  const getFilterField = useCallback(((field: FilterBy) => {\n    setFilterBy(field);\n  }), []);\n\n  const getQuery = useCallback(((text: string) => {\n    setQuery(text);\n  }), []);\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const selectTodo = useCallback(((todo: Todo | null) => {\n    setSelectedTodo(todo);\n  }), []);\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 1000), []);\n\n  const visibleTodo = useMemo(() => (\n    filterTodo(todos, filterBy, appliedQuery)\n  ), [todos, filterBy, appliedQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                filterBy={filterBy}\n                getFilterField={getFilterField}\n                getQuery={getQuery}\n                applyQuery={applyQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                isLoading\n                  ? <Loader />\n                  : (\n                    <TodoList\n                      todos={visibleTodo}\n                      selectTodo={selectTodo}\n                      selectedTodo={selectedTodo}\n                    />\n                  )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && <TodoModal todo={selectedTodo} selectTodo={selectTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}